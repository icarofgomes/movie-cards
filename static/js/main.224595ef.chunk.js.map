{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","className","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","console","log","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","fetchList","a","movieList","MovieDetails","fetchDetails","match","params","movieAPI","movieDetails","deleteFunction","alt","src","NewMovie","shouldRedirect","EditMovie","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.224595ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.objectOf(PropTypes.object).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    console.log(movie)\n    const { title, storyline, id } = movie;\n    return (\n      <div data-testid=\"movie-card\">\n        <div>{title}</div>\n        <div>{storyline}</div>\n        <div><Link to={ `/movies/${id}` }>VER DETALHES</Link></div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","// https://g.co/kgs/uM7Nbx - Star  Wars\n// https://g.co/kgs/Xi3P3u - Clockwork Orange\n// https://g.co/kgs/oxkrQX - Ratatouille\n\nconst movies = [\n  {\n    id: 1,\n    title: 'Star Wars',\n    subtitle: 'Empire Strikes Back',\n    storyline: \"Yoda treina Luke Skywalker para ser um cavaleiro Jedi. Han Solo corteja a Princesa Leia enquanto Darth Vader retorna para combater as forças rebeldes que tentam salvar a galáxia.\",\n    rating: 4.5,\n    imagePath: 'https://live.staticflickr.com/65535/48207320557_01bf42f0f3_b.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'A Clockwork Orange',\n    subtitle: 'Laranja Mecânica',\n    storyline: 'O jovem Alex passa as noites com uma gangue de amigos briguentos. Depois que é preso, se submete a uma técnica de modificação de comportamento para poder ganhar sua liberdade.',\n    rating: 4.5,\n    imagePath: 'https://live.staticflickr.com/2761/4062111702_98da5213b1_b.jpg',\n    bookmarked: false,\n    genre: 'action',\n  },\n  {\n    id: 3,\n    title: 'Ratatouille',\n    subtitle: 'Ratatouille',\n    storyline: 'Remy reside em Paris e possui um sofisticado paladar. Seu sonho é se tornar um chef de cozinha e desfrutar as diversas obras da arte culinária. O único problema é que ele é um rato. Quando se acha dentro de um dos restaurantes mais finos de Paris, Remy decide transformar seu sonho em realidade.',\n    rating: 5,\n    imagePath: 'https://live.staticflickr.com/1248/1051508675_5ffd3d1093.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Loading } from '../components';\nimport MovieCard from '../components/MovieCard';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchList();\n  }\n\n  fetchList = async () => {\n    const movieList = await movieAPI.getMovies();\n    this.setState({ movies: movieList });\n  }\n\n  render() {\n    const { movies } = this.state;\n    const movieList = movies.map(\n      (movie) => <MovieCard key={ movie.title } movie={ movie } />,\n    );\n\n    if (movieList.length === 0) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-list\">\n        { movieList }\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: '',\n    };\n  }\n\n  async componentDidMount() {\n    this.fetchDetails();\n  }\n\n  fetchDetails = async () => {\n    const { match: { params: { id } } } = this.props;\n    const movieDetails = await movieAPI.getMovie(id);\n    this.setState({\n      movie: movieDetails,\n    });\n  }\n\n  deleteFunction = async () => {\n    const { match: { params: { id } } } = this.props;\n    await movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    const { movie } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n    if (!title) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-details\">\n        <h1>{ `Title: ${title}` }</h1>\n        <img alt=\"Movie Cover\" src={ imagePath }/>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <Link to=\"/movie-cards\">VOLTAR</Link>\n        <Link to={ `${id}/edit` }>EDITAR</Link>\n        <Link to=\"/movie-cards\" onClick={ this.deleteFunction }>DELETAR</Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/movie-cards\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: '',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    this.fetchDetails();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      movie: updatedMovie,\n      shouldRedirect: true,\n    });\n  }\n\n  fetchDetails = async () => {\n    const { match: { params: { id } } } = this.props;\n    const movieDetails = await movieAPI.getMovie(id);\n    this.setState({\n      movie: movieDetails,\n    });\n  }\n\n  render() {\n    const { shouldRedirect, movie } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/movie-cards\" />;\n\n    if (movie === '') return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.objectOf(PropTypes.object).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route exact path=\"/movie-cards\" component={ MovieList } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}